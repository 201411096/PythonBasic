------------------------------------------------------------
[파이썬 장점]

1. 간단하고 배우기 시작하기 쉬운 언어
2. 인터프리터 언어
3. 강력한 라이브러리 제공
4. 범용적 언어 (R에 비해서)

[파이썬 단점]
1. 하드웨어 제어같은 복잡한 연산 또는 반복 연산이 많은 프로그램은 부적절
	ㄴ ( jython, cPython . . . )
2. GIL ( Global Interpreter Lock ) : 배타적 잠금
	ㄴ 쓰레드로부터 안전하지 않은 코드를 다른 쓰레드와 공유하면서 충돌되는 상황을 방지하기 위해 배타적 잠금(GIL)한다.
------------------------------------------------------------
변수

1. 모든 자료형을 객체로 취급 -> 일반 변수들도 레퍼런스임
2. 여러 변수 선언 가능
	ㄴ a, b = 10, 20
3. 값 swap
	ㄴ b, a = a, b
4. 메모리에서 삭제
	ㄴ del varname
5. 2진수, 8진수, 16진수
	ㄴ 0b, 0o, 0x
------------------------------------------------------------
연산자

1. 기초연산자
	ㄴ 나누기(실수값) : /
	ㄴ 나누기(정수값) : //
	ㄴ 자승 : **
------------------------------------------------------------
형변환
	ㄴ input() 사용시 string으로 받음 -> int float값이 필요할 경우 형변환이 필요
	ㄴ str() : 타입을 문자열로 바꿔줌
------------------------------------------------------------
문자열
	ㄴ (' '),  (" ") 간의 차이가 존재하지않음
		ㄴ "", ''를 문자열에 포함시키고 싶다면 서로 반대로 작성하면됨
	ㄴ (''' '''), (""" """)은 개행을 포함한 문자열임
		ㄴ "", ''를 모두 포함시킬 수 있음
	ㄴ 문자열끼리 +, *가 사용가능함
		ㄴ 주의사항 : print()
			ㄴ print() 안에서 사용시 문자열사이에서만 +를 사용하고, 다른 type끼리 구분은 쉼표(,)를 사용함
------------------------------------------------------------
문자열 슬라이싱
	ㄴ 인덱스는 0부터 시작
	ㄴ s[i] : s문자열에서 i번째 문자 추출
	ㄴ s[i:j] : s문자열 i번째 ~ j-1까지의 문자 추출
	ㄴ s[i:j:k] : s문자열 i번쨰 ~ j-1까지를 k개씩 건너뛰어 문자 추출
		ㄴ k : default 값이 1임 (기본적으로 1개씩 건너뛴다고 봄)
	ㄴ s[-i] : s문자열 뒤에서 i번째 문자 추출
		ㄴ 뒤에서는 -1부터 시작
------------------------------------------------------------
문자열 인덱싱
	ㄴ s.count('글') : s문자열에서 '글'이라는 문자 개수 세기
	ㄴ s.index('글') : s문자열에서 문자 '글' 위치 알려주기
		ㄴ 찾고자 하는 문자나 문자열이 없을 경우 오류 발생
	ㄴ s.find('글') : s문자열에서 문자 '글' 위치 알려주기
		ㄴ 찾고자 하는 문자나 문자열이 없을 경우 -1 반환
	ㄴ s.rfind('글') : s문자열에서 문자 '글' 오른쪽에서 왼쪽으로 찾아서 알려주기
		ㄴ 반환하는 인덱스는 정상적으로 왼쪽에서부터의 숫자를 반환
	ㄴ len(s) : s문자열 길이
------------------------------------------------------------
문자열 처리
	ㄴ s.upper() : 대문자로
	ㄴ s.lower() : 소문자로
	ㄴ s.lstrip() : 왼쪽 공백 제거
	ㄴ s.rstrip() : 오른쪽 공백 제거
	ㄴ s.sstrip() : 양쪽 공백 제거
	ㄴ. s.replace('', '') : 문자열 변경
		ㄴ 모든 공백 제거시에도 사용
	ㄴ s.split()
		ㄴ 매개변수가 없으면 공백으로 나눔
	ㄴ d.join(s)
		ㄴ d 단어를 s 문자열에 삽입
	ㄴ s.startwith(d)
		ㄴ s문자열이 d로 시작하는지 -> boolean값 반환
	ㄴ s.endswith(d)
		ㄴ s문자열이 d로 끝나는지 -> boolean값 반환
	ㄴ capitalize()
		ㄴ 첫 문자를 대문자로 변환
	ㄴ title()
		ㄴ 각 단어의 앞 글자만 대문자로 변환
------------------------------------------------------------
출력
	ㄴ print('%s 님은 %d세 이시고 키는 %10.3f입니다.' %(name, age, height))
		ㄴ %10.3f -> 정수 10자리 소수점 3자리
			ㄴ 빈자리는 공백으로 채우는듯(정수부분도..?)
		ㄴ %.3f -> 소수점만 3자리