------------------------------------------------------------
[파이썬 장점]

1. 간단하고 배우기 시작하기 쉬운 언어
2. 인터프리터 언어
3. 강력한 라이브러리 제공
4. 범용적 언어 (R에 비해서)

[파이썬 단점]
1. 하드웨어 제어같은 복잡한 연산 또는 반복 연산이 많은 프로그램은 부적절
	ㄴ ( jython, cPython . . . )
2. GIL ( Global Interpreter Lock ) : 배타적 잠금
	ㄴ 쓰레드로부터 안전하지 않은 코드를 다른 쓰레드와 공유하면서 충돌되는 상황을 방지하기 위해 배타적 잠금(GIL)한다.
------------------------------------------------------------
PyCharm
	ㄴ Ctrl + Q -> 함수 설명 내용을 보여줌
------------------------------------------------------------
변수

1. 모든 자료형을 객체로 취급 -> 일반 변수들도 레퍼런스임
2. 여러 변수 선언 가능
	ㄴ a, b = 10, 20
3. 값 swap
	ㄴ b, a = a, b
4. 메모리에서 삭제
	ㄴ del varname
5. 2진수, 8진수, 16진수
	ㄴ 0b, 0o, 0x
------------------------------------------------------------
연산자

1. 기초연산자
	ㄴ 나누기(실수값) : /
	ㄴ 나누기(정수값) : //
	ㄴ 자승 : **
2. 논리연산자
	ㄴ not
	ㄴ and
	ㄴ or
3. 이진연산자
	ㄴ ~ : 이진 not
	ㄴ | : 이진 or
	ㄴ & : 이진 and
	ㄴ ^ : 이진 xor
	ㄴ << : shift
	ㄴ >> : shift
4. 기타연산자
	ㄴ is : 비교하는 객체의 주소가 같은지
	ㄴ is not : 비교하는 객체의 주소가 다른지
	ㄴ in : 요소에 포함되는지
	ㄴ not in : 요소에 포함되지 않는지
------------------------------------------------------------
형변환
	ㄴ input() 사용시 string으로 받음 -> int float값이 필요할 경우 형변환이 필요
	ㄴ str() : 타입을 문자열로 바꿔줌
------------------------------------------------------------
문자열
	ㄴ (' '),  (" ") 간의 차이가 존재하지않음
		ㄴ "", ''를 문자열에 포함시키고 싶다면 서로 반대로 작성하면됨
	ㄴ (''' '''), (""" """)은 개행을 포함한 문자열임
		ㄴ "", ''를 모두 포함시킬 수 있음
	ㄴ 문자열끼리 +, *가 사용가능함
		ㄴ 주의사항 : print()
			ㄴ print() 안에서 사용시 문자열사이에서만 +를 사용하고, 다른 type끼리 구분은 쉼표(,)를 사용함
------------------------------------------------------------
문자열 슬라이싱
	ㄴ 인덱스는 0부터 시작
	ㄴ s[i] : s문자열에서 i번째 문자 추출
	ㄴ s[i:j] : s문자열 i번째 ~ j-1까지의 문자 추출
	ㄴ s[i:j:k] : s문자열 i번쨰 ~ j-1까지를 k개씩 건너뛰어 문자 추출
		ㄴ k : default 값이 1임 (기본적으로 1개씩 건너뛴다고 봄)
		ㄴ k : 인덱스 증가폭이 음수로 지정될 수도 있음
			ㄴ ***** 이 경우에는 끝 인덱스보다 시작 인덱스를 더 크게 지정해야 함 *****
	ㄴ s[-i] : s문자열 뒤에서 i번째 문자 추출
		ㄴ 뒤에서는 -1부터 시작
		ㄴ 인덱스가 뒤에서부터 시작해도 일반적인 계산은 전부 앞에서부터 그 위치까지 감(위치만이 유의미)
	ㄴ ***** 배열에도 적용이 됨 *****
------------------------------------------------------------
문자열 인덱싱
	ㄴ s.count('글') : s문자열에서 '글'이라는 문자 개수 세기
	ㄴ s.index('글') : s문자열에서 문자 '글' 위치 알려주기
		ㄴ 찾고자 하는 문자나 문자열이 없을 경우 오류 발생
	ㄴ s.find('글') : s문자열에서 문자 '글' 위치 알려주기
		ㄴ 찾고자 하는 문자나 문자열이 없을 경우 -1 반환
	ㄴ s.rfind('글') : s문자열에서 문자 '글' 오른쪽에서 왼쪽으로 찾아서 알려주기
		ㄴ 반환하는 인덱스는 정상적으로 왼쪽에서부터의 숫자를 반환
	ㄴ len(s) : s문자열 길이
------------------------------------------------------------
문자열 처리
	ㄴ s.upper() : 대문자로
	ㄴ s.lower() : 소문자로
	ㄴ s.lstrip() : 왼쪽 공백 제거
	ㄴ s.rstrip() : 오른쪽 공백 제거
	ㄴ s.sstrip() : 양쪽 공백 제거
	ㄴ. s.replace('', '') : 문자열 변경
		ㄴ 모든 공백 제거시에도 사용
	ㄴ s.split()
		ㄴ 매개변수가 없으면 공백으로 나눔
	ㄴ d.join(s)
		ㄴ d 단어를 s 문자열에 삽입
	ㄴ s.startwith(d)
		ㄴ s문자열이 d로 시작하는지 -> boolean값 반환
	ㄴ s.endswith(d)
		ㄴ s문자열이 d로 끝나는지 -> boolean값 반환
	ㄴ capitalize()
		ㄴ 첫 문자를 대문자로 변환
	ㄴ title()
		ㄴ 각 단어의 앞 글자만 대문자로 변환
------------------------------------------------------------
입출력
	ㄴ print('%s 님은 %d세 이시고 키는 %10.3f입니다.' %(name, age, height))
		ㄴ %10.3f -> 정수 10자리 소수점 3자리
			ㄴ 빈자리는 공백으로 채우는듯(정수부분도..?)
		ㄴ %.3f -> 소수점만 3자리
	ㄴ option_end : 개행없이 출력하고 싶을 경우 end옵션 사용
		ㄴ print(i, end=' ')
	ㄴ option_sep : 문자열 사이에 특정한 값을 넣고 싶은 경우
		ㄴ 기본값은 공백이기 때문에 옵션을 주지 않으면 ,를 중심으로 한칸씩 띄우게 됨
		ㄴ print("Best", "python", "book", sep="-:*:-")
	ㄴ input() : 기본적으로 문자열로 입력받음
		ㄴ eval보다 형변환을 하면서 가져오는 것을 권장함
	ㄴ eval() : 함수로 감싸면 숫자를 처리함(***** 권장하지 않음 *****)
------------------------------------------------------------
입출력 : string.format()
	ㄴ print("{0} {1} {2} ... {n}".format(data_0, data_1, data_2, ... , data_n))
	ㄴ print("{0:.2f}, {0:.5f}".format(a))
------------------------------------------------------------
제어문 
	ㄴ 들여쓰기를 하여 블록을 표현함
	ㄴ if문의 구조
		ㄴ if :
		  elif :
		  else :
		ㄴ 조건식이나 else 뒤에는 콜론(:) 표시
		ㄴ 조건식에 괄호가 필요하지 않음
	ㄴ switch문이 존재하지 않음
	ㄴ 실행할 코드가 없으면 pass?
	ㄴ 거짓을 나타내는 값들
		ㄴ i = 0;
		ㄴ i2=0.0
		ㄴ i3=""
		ㄴ i4=str()
		ㄴ i5=list()
		ㄴ i6=tuple()
		ㄴ i7=set()
		ㄴ i8=dict()
		ㄴ i9={}
		ㄴ i10=None
		ㄴ 착각할 수 있는 부분 : -1이 False가 아닌 True임
			ㄴ find()와 연계되면서 착각가능한 부분
				ㄴ find()는 
------------------------------------------------------------
short circuit evaluation - 예시

a=10
b=-1

print(a and b) : -1 출력
	ㄴ and opearion 시에 앞의 값이 false라면 앞의 값의 중요도에 따라 맨앞의 값이 출력이 되지만
	   전체적인 논리 연산의 결과가 true라면 중요도에 따라 가장 마지막 값이 출력이 된다.
print(a or b) : 10 출력
	ㄴ 전체적인 논리 연산의 결과를 떠나서 맨앞의 값이 true라면 뒤의 값들을 볼 이유가 사라지기 때문에
	   맨 앞의 값이 출력이 된다.
------------------------------------------------------------
for문
	ㄴ for <타겟변수> in 집합객체 :
		문장들
	   else:
		문장들
	ㄴ 반복문 뒤의 else는 반복하는 조건에 만족하지 않으면 실행하는 부분
		ㄴ 임의로 반복문을 탈출할 경우(ex) 반복문 안에서의 break..) 반복문 else문은 실행되지않음
	ㄴ range(start, stop, step)
		ㄴ start부터 시작해서 stop까지 step 단위로 감(stop은 포함하지 않음)
		ㄴ start값을 0으로 잡을 경우 생략이 가능
		ㄴ step값을 1로 잡을 경우 생략이 가능
	ㄴ enumerate()
		ㄴ 리스트?튜플?set?을 인덱스(0부터..)와 하나씩 엮어서 tuple로 반환함
	ㄴ zip()
		ㄴ 여러 리스트?튜플?set?을 하나씩 묶어서 반환
			ㄴ 값을 그냥 확인하면 zip object... 이런식으로 보임
			ㄴ 값을 받은 후 튜플 혹은 list로 변환해서 보는게 일반적인듯
			ㄴ 두쌍씩 엮인거라면 dict로 변환이 가능하기는 함
		ㄴ ***** 중간에 개수가 부족하다면 그 전까지만 묶는게 일반적인듯
------------------------------------------------------------
boolean 형
	ㄴ 첫글자는 반드시 대문자
	ㄴ None -> 다른 언어의 null값과 유사
	ㄴ 이진연산자 & |
	ㄴ 일반연산자 and or
	ㄴ
	        자료형         값           부울형
	    -------------------------------------------
	        문자형       "문자"          True
	                          ""             False
	        리스트       [1,2,3]          True       
	                          []             False
	        튜플             ()             False
	        딕셔너리        {}             False
	        숫자형       0이아닌 숫자   True
		               0             False
		             None          False
	    ----------------------------------------------
------------------------------------------------------------
date
	ㄴ 년월일
		ㄴ from datetime import date
			ㄴ date.today() : 오늘의 날짜를 반환
	ㄴ 날짜계산
		ㄴ from datetime import timedelta
			ㄴ +timedelta( ... ) : 날짜를 계산
	ㄴ 년월일 시분초
		ㄴ from datetime import datetime
	ㄴ strftime() -> time format 변경
		ㄴ string format time?
	ㄴ strptime() -> string을 날짜로 변경
		ㄴ string prase time?
------------------------------------------------------------
함수
	ㄴ 리턴값이 없으면 None이 리턴됨 (리턴하는 자료형이 없을 경우 ...)
	ㄴ 파이썬 함수는 여러개를 리턴할 수 있음
		ㄴ 여러개를 리턴할 경우 튜플로 반환하여 리턴함
	ㄴ 위치인자
	ㄴ 키워드인자
		ㄴ 함수사용시..
		ㄴ func(name="김씨", greeing='안녕')
	ㄴ 매개변수의 기본값 지정하기
		ㄴ 함수정의시..
		ㄴ ex) def func(greeing, name="아무개"):
			    print('{0} !!!!!! {1}님'.format(greeing, name))
	ㄴ 헷갈릴 수 있는 부분
		def buggy(arg, result=[]):
		    result.append(arg)
		    print(result)
		buggy('A')	# ['A']
		buggy('B')	# ['A', 'B']
		buggy('Z', [1,2,3,4])# [1,2,3,4, 'Z']
		buggy('가')	# ['A', 'B', '가']
		ㄴ buggy 함수에 있는 result 리스트는 함수 호출시 생성되는 것이 아닌 함수 정의시에 생성됨
	ㄴ 위치인자 모으는 법 *args
		ㄴ 사용법
			def func(a, b, c=0, *args):
			    sum = a+b+c
			    for i in args:
			        sum+=i
			    return sum
			print("#6 위치인자 모으기 확인", func(4, 5))
			print("#6 위치인자 모으기 확인", func(4, 5, 6))
			print("#6 위치인자 모으기 확인", func(4, 5, 6, 7))
			print("#6 위치인자 모으기 확인", func(4, 5, 6, 7, 8, 9))       # args에 7,8,9가 튜플로 들어간다
	ㄴ **kwargs => *args와 유사하지만 딕셔너리 형태로 {'키워드':'특정값'} 식으로 함수 내부로 전달됨
		ㄴ 사용법			
			def func(i, j, k=100, *args, **kwargs):
			    print()
			    print("#7 키워드 인자 모으기 확인", i+j+k)
			    print("#7 키워드 인자 모으기 확인", args)
			    print("#7 키워드 인자 모으기 확인", kwargs)
			func(10, 20)
			func(1, 2, 3)
			func(1, 2, 3, 4, 5, 6)
			func(1, 2, 3, 4, a=10, b=20, c=30)
		ㄴ 사용법2
			# 넘어오는 인자의 값들을 모두 합산한 값을 리턴
			def func(i, j, k=100, *args, **kwargs):
			    sum=i+j+k
			    for temp1 in args:
			        sum+=temp1
			    for temp2 in kwargs.values():
			        sum+=temp2
			    return sum
			
			print(func(10, 20))
			print(func(1, 2, 3))
			print(func(1, 2, 3, 4, 5, 6))
			print(func(1, 2, 3, 4, a=10, b=20, c=30))
	ㄴ 모든 변수가 객체지만 return을 하지 않으면 바뀌지 않는듯
------------------------------------------------------------
전역변수와 지역변수 (global variable, local variable)
	ㄴ 파이썬은 if와 for, while문 안에서 선언된 변수들도 전부 지역변수로 취급함
	ㄴ 지역변수로 취급하는 변수들은 함수안에서 선언된 변수들임
	ㄴ ***** default값을 인자로 주게되면 그 값들은 함수 선언시에 같이 선언되고 계속 같이 쓰임 *****
	ㄴ 헷갈릴 수 있는 부분
		def buggy(arg, result=[]):
		    result.append(arg)
		    print(result)
		buggy('A')	# ['A']
		buggy('B')	# ['A', 'B']
		buggy('Z', [1,2,3,4])# [1,2,3,4, 'Z']
		buggy('가')	# ['A', 'B', '가']
		ㄴ buggy 함수에 있는 result 리스트는 함수 호출시 생성되는 것이 아닌 함수 정의시에 생성됨
------------------------------------------------------------
람다함수
	ㄴ lambda_function = lambda <인자> : <인자 활용 수행 코드>
	ㄴ lambda_function(<인자>)
	ㄴ 예시
		la =lambda x, y: x+y
		print( la(2,3) )		#5가 출력됨
	ㄴ 함수일 때의 표기법
		def f(x, y):
		    return x+y
		print( f(2, 3) )
------------------------------------------------------------
맵리듀스(map reduce)
	ㄴ map()
		ㄴ 연속 데이터를 저장하는 시퀀스 자료형에서 모든 요소마다 같은 함수를 적용하고자할 때 사용
		ㄴ map(함수명, 연속 데이터를 저장하는 시퀀스 자료형)
			ㄴ 연속 데이터를 저장하는 시퀀스 자료형 : ex) list
		ㄴ 3버전에서는 마지막에 list()혹은 tuple()로 형변환이 필요
			ㄴ list() 로의 형변환이 일반적인듯
	ㄴ reduce()
		ㄴ 리스트 값은 시퀀스 자료형에 차례대로(1) 함수를 적용(2)하여 모든 값을 통합(3)하는 함수
		ㄴ reduce(함수명, 시퀀스 자료형)
		ㄴ 사용예시
			from functools import reduce	
			ex =range(1,5) # ex=[1,2,3,4]
			def f(x, y):
			    return x*y
			print(reduce(f, ex)) # 1*2*3*4
------------------------------------------------------------
내장함수
	ㄴ max, min, sum, abs, round, len ...
------------------------------------------------------------
모듈
	ㄴ __name__
		ㄴ __name__ 변수를 통해 현재 스크립트 파일이 시작점인지 모듈인지 판단
		ㄴ #파일(first.py)을 직접 실행 시 __name__ 변수의 값은 __main__
	ㄴ 패키지 : 여러 모듈들을 모아놓은 디렉토리
		ㄴ 패키지 : 디렉토리
		ㄴ 모듈 : 파일
		ㄴ #다른 파일에 의해 실행을 하면 __name__ 변수의 값은 파일명으로 나옴
	ㄴ 모듈의 전체를 사용할 경우
		ㄴ ex) import mymodule as mm
	ㄴ 모듈 부분적 사용방법
		ㄴ from 모듈명 import 변수명
		ㄴ from 모듈명 import 함수명
		ㄴ from 모듈명 import 클래스명
	ㄴ 모듈을 부분적으로 사용 예시
		ㄴ ex) from mymodule import get_weather, get_date
	ㄴ 패키지 생성시 __init__.py 파일이 생김
		ㄴ 지금은 없어도 상관없지만 이전버전의 호환문제로 있는것이 좋음
------------------------------------------------------------
zip
	>>> list(zip([1, 2, 3], [4, 5, 6]))
	[(1, 4), (2, 5), (3, 6)]
	>>> list(zip([1, 2, 3], [4, 5, 6], [7, 8, 9]))
	[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
	>>> list(zip("abc", "def"))
	[('a', 'd'), ('b', 'e'), ('c', 'f')]
------------------------------------------------------------
클래스
	ㄴ 클래스 선언 예시
		class Simple:
		    data = "Hello"
		    def __init__(self):	# 파이썬의 생성자(함수이름과 매개변수 이름 고정)
		        self.age = 38	# 멤버변수를 선언하면서 초기화
		        self.name = "홍길동"
		        print('__init__ 호출')
		    def __del__(self): # 소멸자 # 파이썬의 소멸자
		        print('__del__ 호출')
		ㄴ self : 객체 자신을 가리킴(java의 this)
		ㄴ 접근지정자 같은 개념이 존재하지 않음
	ㄴ 클래스 생성 예시
		s = Simple()	# s -> 클래스 객체 변수 이름, Simple -> 클래스 이름
	ㄴ 클래스 사용 예시
		print(s.data)
		print(s.age)
		print(s.name)
	ㄴ dir() : 해당 클래스 객체에 대한 모든 내용이 담겨져있음
------------------------------------------------------------
인스턴스 함수, 클래스 함수, static 함수 (instance method, class method, static method)
	ㄴ 인스턴스 함수(instance method) :  'self'인 인스턴스를 인자로 받고 인스턴스 변수와 같이 하나의 인스턴스에만 한정된 데이터를 생성, 변경, 참조
	ㄴ 클래스 함수(class method) :  'cls'인 클래스를 인자로 받고 모든 인스턴스가 공유하는 클래스 변수와 같은 데이터를 생성, 변경 또는 참조
	ㄴ static 함수(static method) :  클래스명 접근을 하며 객체끼리의 공유하고자 하는 메소드
------------------------------------------------------------
Magic method(매직 메소드)
	ㄴ 클래스안에 정의할 수 있는 스페셜 메소드이며 클래스를 int, str, list등의 파이썬의 빌트인 타입(built-in type)과 같은 작동을 하게 해준다
	ㄴ __init__이나 __str__과 같이 메소드 이름 앞뒤에 더블 언더스코어("__")를 붙인다
	ㄴ 사용예시
		class Sample:
		    def __init__(self, name, age):
		        self.name = name
		        self.age = age
		    def __str__(self):
		        return '이름 : {} 나이:{}'.format(self.name, self.age)
		    def __add__(self, other):
		        self.age+=other
		    def __gt__(self, other):
		        if self.age > other:
		            return "성년입니다."
		        else:
		            return "미성년입니다."
		    def __bool__(self):
		        if self.name == '홍길동':
		            return True
		        else:
		            return False
		s = Sample('홍길자', 25)
		print(s)
		s+10
		print(s)
		#print(s>20)
		print(s>40)
		if s:
		    print('홍길동 본인입니다.')
		else:
		    print('홍길동 본인이 아닙니다')
------------------------------------------------------------
클래스 상속
	ㄴ 사용예시
		class Animal:
		    def move(self):
		        print('동물은 움직인다')
		class Wolf(Animal):
		    def move(self):
		        print("늑대는 네발로 움직인다")
		class Human(Animal):
		    def move(self):
		        print("사람은 두발로 움직인다")
		class WereWolf(Human, Wolf):
		    def move(self):         # 상속받는 두곳에서 동일한 이름의 여러 메소드가 있어도 문제가 생기지 않음
		        super().move()      # 먼저 상속받은 클래스의 메소드를 오버라이딩함
		        print("늑대인간은 ---------")
	ㄴ super() : 자식 클래스에서 부모클래스의 내용을 사용하고 싶을경우 사용
------------------------------------------------------------
예외처리
	ㄴ 예시_01
		try:
		     10/0
		except Exception:
		    print("예외")
	ㄴ 예시_02 : 예외 메시지 확인
		try:
		     10/0
		except Exception as e:
		    print("예외:", e)
	ㄴ 예시_02_2 : 예외 메시지 확인 (as 없이)
		try:
		    10/0
		except Exception:
		    print("예외:", Exception)
	ㄴ 예시_03 : finally 사용
		try:
		    10/0
		except Exception:
		    print("예외:", Exception)
		finally:
		    print("무조건 실행")
	ㄴ 예시_04 : 예외가 발생하지 않았을 경우 실행되는 부분 (ex) 파일 입출력)
		try:
		    f = open('./data/data.txt', 'r', encoding='utf-8')
		except Exception as e:
		    print('예외발생:', e)
		else:               # 예외가 발생되지 않았을 경우.. 실행되는 부분
		    while True:
		        line = f.readline()
		        if not line:    #line에 아무값도 없을 경우
		            break
		        print(line, end='')
		     f.close()
		finally:
		    print('파일처리 종료')
------------------------------------------------------------
파일입출력
	ㄴ fileObj(파일변수이름) = (filename, mode)
		ㄴ mode 첫번째 글자 - 작업 표시
			ㄴ r(read) : 파일 읽기
			ㄴ w(write) : 파일 쓰기
			ㄴ x(write) : 파일 쓰기
			ㄴ a(append) : 파일 추가
		ㄴ mode 두번째 글자 - 파일 타입
			ㄴ t : 텍스트	(default값)
			ㄴ b : 이진(binary)
		ㄴ encodiing='utf-8' : 한글
	ㄴ 예시_01
		try:
		    f = open('./data/data.txt', 'r', encoding='utf-8')
		except Exception as e:
		    print('예외발생:', e)
		else:               # 예외가 발생되지 않았을 경우
		    while True:
		        line = f.readline()
		        if not line:    #line에 아무값도 없을 경우
		            break
		        print(line, end='')
		    f.close()
		finally:
		    print('파일처리 종료')
	ㄴ 예시_02 <with 구문>
		try:
		    with open('./data/data.txt', 'r', encoding='utf-8') as f:
		        while True:
		            line = f.readline()
		            if not line:    #line에 아무값도 없을 경우
		                break
		            print(line, end='')
		except Exception as e:
		    print('예외발생:', e)
		finally:
		    print('종료')
	ㄴ 예시_03
		try:
		    with open('./data/data.txt', 'r', encoding='utf-8') as f:
		        contents = f.read()	# 파일 전체를 읽음
		        words = contents.split()
		        num = len(words)
		except FileNotFoundError as e:
		    print('예외발생:', e)
		else:
		    print('총 단어 수 :', num)
		finally:
		    print('파일 입출력 종료')
------------------------------------------------------------
파일입출력_csv
	ㄴ csv : comma-separated variables
		ㄴ  몇 가지 필드를 쉼표(,)로 구분한 텍스트 데이터 및 텍스트 파일
	ㄴ 리스트의 데이터를 csv로 저장하기
		data = [ [1, '감', '책임'], [2, '주', '연구원'] ]
		with open('./data.imsi.csv', 'wt', encoding='utf-8') as f:
		    cout = csv.writer(f)
		    cout.writerows(data)
	ㄴ csv 파일을 읽어서 리스트 변수에 저장하기
		data = []
		with open('./data.imsi.csv', 'r', encoding='utf-8') as f:
		    cin = csv.reader(f)
		    data = [row for row in cin if row]  # row값이 있을 경우에만 리스트가 추가됨 # 이 문장이 없으면 비어있는 리스트가 들어가있음 
		print(data)
------------------------------------------------------------
파일입출력_json
	ㄴ 사용예시
		import json
		f = open('data/temp.json', 'r', encoding='utf-8')
		data = f.read()
		items = json.loads(data)
		print(type(items)) # json.loads 딕셔너리 형태로 반환해줌
		print(items)
		for item in items:
		    print('>', item)
		for item in items.values():
		    print('>', item)
		for item in items.items():
		    print('>', item)
------------------------------------------------------------
del remove 차이
	ㄴ del a[인덱스] : 해당 인덱스 원소가 삭제됨
	ㄴ a.remove(원소) : 리스트 a의 해당 원소가 삭제됨
	ㄴ del 예시 : 특정 색인에서 항목을 제거
		a = [3, 2, 2, 1]
		del a[1]
		a
		[3, 2, 1]
	ㄴ remove 예시 : 특정 인덱스가 아닌 first matcing value를 제거
		a = [0, 2, 3, 2]
		a.remove(2)
		a
		[0, 3, 2]