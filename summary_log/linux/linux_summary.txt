----------------
명령어
	ㄴ 명령어 --help
		ㄴ 명령어 도움말
	ㄴ man 명령어 (manual)
		ㄴ 명령어 도움말 한글판
	ㄴ ls : 리스트 (list)
	ㄴ pwd : 현재 디렉토리 위치 ( print working directory)
	ㄴ cd : 디렉토리 변경(change directory)
	ㄴ sw : 사용자 변경(substitute user)
	ㄴ ln : 링크 생성(link)
	ㄴ ps : 프로세스 확인
----------------
패키지 관리자 도구
	ㄴ yum(레드햇/페도라/센트os)
		ㄴ 패키지 설치 : yum install <패키지>
		ㄴ 패키지 제거 : yum remove <패키지>
		ㄴ 시스템 업그레이드 : yum update 또는 yum upgrade
			ㄴ yum update가 더 안정적인 선택(권장사항)
			ㄴ yum upgrade 는 더이상 사용되지 않는 관련된 파일이나 패키지를 삭제함
	ㄴ apt(데비안/우분투/민트)
		ㄴ 패키지 설치 : apt install <패키지>
		ㄴ 패키지 제거 : apt remove <패키지>
		ㄴ 시스템 업그레이드 : apt update 또는 apt upgrade
	ㄴ pacman(아치/만자로)
		ㄴ 패키지 설치 : pacman -S <패키지>
		ㄴ 패키지 제거 : pacman -R <패키지>
		ㄴ 시스템 업그레이드 : pacman -Syu
----------------
systemctl
	ㄴ 서비스 시작
		ㄴ systemctl start <서비스 이름>
	ㄴ 서비스 재시작
		ㄴ systemctl restart <서비스 이름>
	ㄴ 서비스 중지
		ㄴ systemctl stop <서비스 이름>
	ㄴ 서비스 활성화
		ㄴ systemctl enable <서비스 이름>
	ㄴ 서비스 비활성화
		ㄴ systemctl disable <서비스 이름>
----------------
ls : 목록보기
	ㄴ 옵션
		ㄴ -l : 자세히보기
		ㄴ -a : 숨김파일 및 디렉토리도 보임
		ㄴ -R : 하위 디렉토리도 전부 같이 봄
	ㄴ d: directory / -: file / l: link
		ㄴ 파일의 확장자가 없는 경우가 많음
			ㄴ temp	/ temp.txt / 
	ㄴ drwxr-xr-x : d (directory)
		       rwx (계정)
		       r-x  (그룹)
		       r-x  (그외기타)
		ㄴ r : read, w : write, x : execute
	ㄴ-rw-r--rw- : ...
	ㄴ 파일과 디렉토리 생성
		ㄴ 알파벳 + 숫자 + (_) + (-) + (.) 조합 가능
		ㄴ 대소문자 구별
		ㄴ (.)으로 시작하면 숨김파일로 간주
----------------
cd : 디렉토리 변경
	ㄴ root계정 : /root
	ㄴ 일반계정 : /home/계정명
	ㄴ cd / : 최상위 디렉토리로 이동
	ㄴ cd ~ : 사용자의 홈 디렉토리로 이동
	ㄴ cd .. : 부모 디렉토리로 이동
----------------
파일관리
	ㄴ 복사 : cp
	ㄴ 제거 : rm
		ㄴ rm -r : 디렉토리와 그들의 내용을 전부 지움 (recursive..?)
		ㄴ rm -i : 삭제할지 물어봄
	ㄴ 빈파일 생성 : touch
		ㄴ 기존파일의 수정시간을 변경
	ㄴ 이동 : mv
		ㄴ 파일 이름 변경시에도 사용함
	ㄴ 이름 변경 : rename
		ㄴ rename은 하나 혹은 하나 이상의 파일명을 일괄 변경할때 사용
	ㄴ 파일보기 : cat(concatenate)
		ㄴ head : 앞에 10줄만
			ㄴ 옵션 : -(숫자) 그만큼 봄
		ㄴ tail : 뒤에 10줄만
			ㄴ 옵션 : -(숫자) 그만큼 봄
	ㄴ 파일보기2 : more 
		ㄴ 자른곳에서부터 조금씩 봄
			ㄴ 옵션 : -(숫자) 그만큼 봄
		ㄴ enter 한줄씩 더 봄
		ㄴ spacebar 단위만큼 더 봄
----------------
디렉토리관리
	ㄴ 디렉토리 생성 : mkdir (make directory)
		ㄴ mkdir -p : 부모 디렉토리도 한꺼번에 같이 생성
			ㄴ mkdir -p temp/temp2/temp3
				ㄴ 계층적으로 3개의 디렉토리를 같이 생성함
	ㄴ 디렉토리 삭제 : rmdir (remove directory)
----------------
find : 파일/디렉토리 찾기
	ㄴ name : 이름으로 찾을 때
	ㄴ type : 형식으로 찾을 때 (d : directory, f : file)
	ㄴ usr 디렉토리에서 확장자가 java인 파일 찾기
		ㄴ find /usr -name *.java
----------------
하드링크 심볼릭링크
	ㄴ 링크 생성
		ㄴ ln [원본 파일] [하드 링크 이름]
		ㄴ ln -s [원본 파일] [심볼릭 링크 이름]
	ㄴ ln : 하드링크 생성
	ㄴ ln -s : 심볼릭링크 생성 (-symbolic)
	ㄴ drwxr-xr-x. _ : _부분이 그 파일에 몇개의 링크가 걸려있는지 알 수 있음
	ㄴ 하드링크와 심볼릭링크의 차이점
		ㄴ 하드링크는 기존에 있던 파일과 같은 아이디값을 가짐
		ㄴ 심볼릭링크는 기존에 있던 파일을 가리키는 것을 가리킴?..
	ㄴ 심볼릭링크로 생성하면 모든 사용자에게 모든 권한이 주어짐 (하드링크는 기존파일과 똑같은 권한을 줌)
	ㄴ 구조1
		hello	
		ㄴ basefile <- symboliclink
		ㄴ hardlink
	ㄴ 구조1에서 basefile 삭제 시
		ㄴ hardlink가 남아있어서 hello가 담겨있는 파일은 살아있음
		ㄴ symboliclink는 hello가 담겨있는 파일을 찾지 못함
	ㄴ 심볼릭 링크는 버전관리에 용이
----------------
프로세스
	ㄴ 프로세스 확인 명령어 : ps
	ㄴ -e : 모든 프로세스를 전부 봄
	ㄴ -a : 현재 실행중인 프로세스만
	ㄴ -f : ps를 format?의 형식으로 맞춰서
	ㄴ -x : 숨긴 프로세스도 봄
	ㄴ process stat : z -> zombie process
	ㄴ kill : 프로세스 종료
		ㄴ kill -9 : 강제 종료
	ㄴ foreground process : 화면에 실행이 보이는 프로세스
	ㄴ background process : 화면에 실행이 보이지 않는 프로세스
		ㄴ 프로세스 실행시 &를 붙이면 background로 프로세스가 돌아감
	ㄴ grep _ : 특정 단어가 포함된 부분을 찾아줌
		ㄴ ps -ef | grep yes
----------------
vi 에디터
	ㄴ i : 현재 커서의 위치부터 입력
	ㄴ a : 현재 커서의 위치 다음칸부터 입력
	ㄴ esc : 명령모드로 전환
	ㄴ x : 삭제
	ㄴ dd : 현재 커서 행 삭제
	ㄴ (숫자)dd : 현재 커서부터 숫자만큼의 행을 삭제
	ㄴ 나가기
		ㄴ 저장하고 나가기 -> :wq
		ㄴ 저장 안하고 나가기 -> :q!
	ㄴ :set nu
		ㄴ 라인수가 나옴
	ㄴ :setnonu
		ㄴ 라인수를 다시 숨김
	ㄴ :숫자
		ㄴ 해당 라인으로 넘어감
	ㄴ /단어
		ㄴ 해당 단어가 속한 라인으로 넘어감
	ㄴ 콜론없이 gg
		ㄴ 문서 맨앞으로 이동
	ㄴ shift g
		ㄴ 문서 맨뒤로 이동
	ㄴ yy : 커서가 있는 행 복사
	ㄴ (숫자)yy : 커서가 있는 행부터 숫자만큼 행 복사
	ㄴ p : 커서가 있는 다음행에 붙여넣기
	ㄴ :u -> undo, 실행취소
	ㄴ ctrl - z를 눌러서 실수하면 바로 나와짐
		ㄴ terminal 창에서 fg를 누르면 다시 들어와짐
	ㄴ ctrl - s 화면이 freeze됨
		ㄴ ctrl - q ctrl-s로 freeze된 화면을 다시 풀어줌
----------------
사용자와 그룹관리
	ㄴ 사용자추가 : useradd xxx
	ㄴ 사용자삭제 : userdel xxx
		ㄴ -r 옵션 사용시 /home 디렉토리에서도 계정과 관련된 디렉토리가 사라짐
	ㄴ 비밀번호설정 : passwd xxx
	ㄴ 계정일반정보확인 : vi(or gedit) /etc/passwd
	ㄴ 비밀번호확인 : vi(or gedit) /etc/shadow
	ㄴ 그룹정보확인 : vi(or gedit) /etc/group
	ㄴ 그룹생성 : groupadd ooo
	ㄴ 그룹삭제 : groupdel ooo
	ㄴ 그룹확인 : groups (본인그룹확인)
	ㄴ 그룹관리 : gpasswd
		ㄴ 옵션이 없으면 그룹암호 설정
			ㄴ gpasswd (그룹이름)
		ㄴ -r : 암호제거
			ㄴ gpasswd -r (그룹이름)
		ㄴ -A : 그룹관리자로 설정
			ㄴ gpasswd -A (사용자이름) (그룹이름)
		ㄴ -d :  delete user
			ㄴ gpasswd -d (사용자이름)
	ㄴ 사용자를 추가하면서 그룹지정 : useradd -g ooo xxx
	ㄴ 사용자 계정 수정 : usermod
		ㄴ -u : 사용자 계정의 UID 생성? 변경?
		ㄴ -g : 사용자 계정의 1차 그룹의 GID 생성
		ㄴ -G : 사용자 계정의 2차 그룹의 GID 생성
		ㄴ -c : Comment
		ㄴ -d : 사용자의 홈디렉토리를 지정
		ㄴ -e : 사용자의 계정 만기일 지정
		ㄴ -f : 사용자의 계정 유효일 지정
		ㄴ -s : 로그인 시 사용할 기본 쉘 지정
----------------
접근권한
	ㄴ 사용권한변경 : chmod
		ㄴ 소유자		같은그룹자	기타그룹자
		ㄴ rwx		rwx		rwx
		ㄴ rw-		r-x		r--
		ㄴ (1) 기호에 의한 표시
		ㄴ u(user)	g(group)		o(other)		a(all)
		ㄴ 사용예시
			ㄴ chmod u-w centos.txt (user권한에서 w권한을 뺌)
			ㄴ chmod u+r centos.txt (user권한에서 r권한을 추가)
			ㄴ chmod uo+r centos.txt (user, 기타사용자에게 r권한을 추가)
			ㄴ chmod a+wrx centos.txt (모든 유저에게 모든권한을 줌)
			ㄴ chmod u-x,o-r centos.txt (사용자에게 실행권한을 빼고, 기타사용자에게서 읽기권한을 뺌)
				ㄴ ,사이에 공백을 두면 안됨
			ㄴ chmod o=rw centos.txt ( 기타 사용자의 권한을 읽고쓰기로 바꿈)
		ㄴ (2) 숫자에 의한 표시 (421)
		ㄴ rwx(7)		rwx(7)		rwx(7)
		ㄴ rw-(6)		r-x(5)		r--(4)
		ㄴ 사용예시
			ㄴ chmod ___(숫자3자리) (타겟)
	ㄴ 소유자변경 : chown
			ㄴ chown (소유자) (타겟)
	ㄴ 소유그룹변경? : chgrp
			ㄴ chgrp (소유자) (타겟)
----------------
쉘 프로그래밍
	ㄴ 주석 #으로 시작
		ㄴ 첫번째 줄의 #!/bin/sh 는 주석이 아님
	ㄴ echo 출력
	ㄴ .sh 파일 실행
		ㄴ 사용예시
			ㄴ sh test.sh
			ㄴ sh ./test.sh
			ㄴ ./test.sh : sh없이 사용하는 경우...
				ㄴ 허가 거부 : chmod로 권한 수정이 필요(실행권한 부여가 필요함)
	ㄴ 변수 $
	ㄴ ***** 변수에 값 대입시에는 $를 사용하지 않음 *****
	ㄴ 변수 선언시
		ㄴ 등호(=) 사이에 공백이 있으면 안됨
			ㄴ 등호연산자를 비교연산자로 사용할 때는 이 연산자도 한칸씩 띄워야 됨
		ㄴ ('')을 사용하면 단순문자열로 취급함 -> ("")을 사용하면 안에 있는 변수가 정상적으로 나오지만 ('')안에서 변수를 사용한다면 변수이름이 문자열처럼 나옴
	ㄴ read : 입력을 받음
		ㄴ 사용예시
			ㄴ read myvar #읽어드린값을 myvar라는 변수에 저장함
			ㄴ echo 'myvar=' $myvar
	ㄴ 숫자 계산
		ㄴ 쉘 스크립트에서 변수값은 모두 문자열
		ㄴ 문자열을 숫자로 변환 : `expr 변수` (small quotation이 아님, 1왼쪽 키)
		ㄴ +-*/ 사이에는 공백을 둬야되는듯
		ㄴ 사용예시
			ㄴ num1=100
			ㄴ num2='expr $num1 + 200`
			ㄴ echo $num2
		ㄴ *, () 는 특수기호라 앞에 \를 붙여야함
			ㄴ 양옆으로 한칸씩 띄워야됨
	ㄴ 매개 변수
		ㄴ 자바의 main() 함수 인자
		ㄴ 파일명이 0번쨰 인자
		ㄴ 사용예시
			ㄴ echo "file name :" $0
			ㄴ echo "param1 : $1, param2 : $2"
				ㄴ 두번째 줄에서 두번째 세번쨰 인자가 나옴
	ㄴ 조건문
		ㄴ if [ 대괄호 앞뒤로 공백 ]	( ; 이후의 then을 미리 같은 줄에 작성할 수 있음)
		ㄴ then
			참인 경우
		ㄴ elif [ 대괄호 앞뒤로 공백 ]
		ㄴ then
			참인 경우
		ㄴ else
			거짓인 경우
		ㄴ fi	if문 종료
	ㄴ case 문
		ㄴ case 변수 in
			경우1) 명령문;;	(세미콜론 두개 필수)
			경우1) 명령문;;
			*)그 외 명령문;;
		    esac
6. 조건연산자
	ㄴ -eq / -neq / -gt / -ge / -lt / -le / !
		ㄴ '-'까지 같이 해야됨
	ㄴ 연습 점수를 입력받아서 A부터 F학점까지 출력
7. 파일 관련 옵션
	ㄴ -f : 파일이면 true
	ㄴ -d : 디렉토리이면 true
	ㄴ -e : 존재하면 true
	ㄴ -r : 읽기가능하면 true
	ㄴ -w : 쓰기가능하면 true
	ㄴ -x : 실행가능하면 true
	ㄴ -s : 파일의 크기가 0이 아니라면 true
8. 논리연산자
	ㄴ AND
		ㄴ if [ A ] && [ B ]
		ㄴ 동일한 코딩 -> if [ A -a B]
	ㄴ OR
		ㄴ if [ A ] || [B]
		ㄴ 동일한 코딩 -> if [ A -o B]
	ㄴ 에러 (실수하기 쉬움)
		ㄴ if [ A && B ] => 에러
9. for
	ㄴ 사용방법_01
		for 변수 in 값1 값2 값...	# 값들 사이에 쉼표가 있지 않음
		do
			반복할 문장들
		done   
	ㄴ 사용방법_02
		for 변수 in `seq 초기값 마지막값`	# python의 range() 와 비슷
		do
			반복할 문장들
		done
	ㄴ 사용방법_03
		for(( 초기값; 조건문; 증가치 ))	# 초기값 앞과 증가치 뒤에 띄워야됨 #초기값 조건문 증가치 3가지는 서로서로 띄워쓰기가 없는듯?
		do
			반복할 문장들
		done
10. while
	ㄴ 사용방법
		while[조건]
		do
			반복할 문장들
		done   

11. break / continue / return

12. date
	ㄴ date 변수 $(date)
	ㄴ date 변수 잘라서 쓰는법
		ㄴ 사용방법
			set $(date)
			$1	#년도
			$4	#요일
			$5	#시간
----------------
첫줄지우기
sed -i '1d' temp.txt

