----------------------------------------------------------------------------------------------------
numpy
	ㄴ 일반적인 import 방식
		ㄴ import numpy as np
	ㄴ 행렬 / 선형대수 / 통계 패키지
	ㄴ 머신러닝의 이론적 백그라운드는 선형대수와 통계로 이루어져 있다
	ㄴ 사이킷런 같은 머신러닝 패키지가 넘파이 기반으로 되어 있다
	ㄴ ndarray
		ㄴ numpy 기반 데이터 타입
		ㄴ np.array()
			ㄴ numpy 배열 생성
			ㄴ 사용예시_01
				list_1 = [1,2,3]
				list_2 = [9,8,7]
				arr = np.array([list_1, list_2])
----------------------------------------------------------------------------------------------------
np.array()
	ㄴ numpy 배열 생성
	ㄴ 사용예시_01
		list_1 = [1,2,3]
		list_2 = [9,8,7]
		arr = np.array([list_1, list_2]) # ndarray(numpy 배열)형태의 2행 2열 배열이 생성됨
		print(arr) # [[1,2,3][9,8,7]]
		print(type(arr)) # numpy.ndarray
----------------------------------------------------------------------------------------------------
.shape
	ㄴ 배열의 형태를 알려줌
	ㄴ 사용예시
		print(arr.shape) # (2,3)
----------------------------------------------------------------------------------------------------
.ndim
	ㄴ 배열이 몇차원 배열인지 알려줌
	ㄴ 사용예시
		arr1 = np.array([1, 2, 3])
		arr2 = np.array([[1,2,3]])
		print(arr1.shape) # (3, )
		print(arr2.shape) # (1, 3)
		print(arr1.ndim) # 1 # 1차원 배열
		print(arr2.ndim) # 2 # 2차원 배열
----------------------------------------------------------------------------------------------------
.dtype
	ㄴ 배열 요소들의 자료형 확인
	ㄴ 사용예시
		print(arr.dtype)
----------------------------------------------------------------------------------------------------
.astype
	ㄴ 배열 요소들의 자료형 변경
	ㄴ 시용예시
		arr = arr.astype(np.float64) # 자료형 변경 ( ...-... -> float64)
		print(arr.dtype) # float64
----------------------------------------------------------------------------------------------------
np.arange(10)
	ㄴ 범위를 이용한 배열 생성
	ㄴ 사용예시
		ㄴ a = np.arange(10) # a => [0,1,2,3,4,5,6,7,8,9]
----------------------------------------------------------------------------------------------------
np.zeros(), np.ones()
	ㄴ np.zeros : 요소들을 전부 0으로 채움	
	ㄴ np.ones : 요소들을 전부 1로 채움
	ㄴ 사용방법
		ㄴ arr = np.zeros(shape, dtype=)
	ㄴ 사용예시
		ㄴ a2 = np.zeros((5,5), dtype='int32') # 5행 5열의 배열에 0으로 다 채움
----------------------------------------------------------------------------------------------------
reshape()
	ㄴ ndarray의 차원과 크기를 변경
	ㄴ 사용예시
		arr = np.arange(10)
		print(arr.shape)	# (10,)
		print(arr)		# [0 1 2 3 4 5 6 7 8 9]
		arr2 = arr.reshape(2,5) # 2행 5열
		print(arr2.shape) # (2,5)
	ㄴ 행과 열 수가 맞지 않으면 에러 발생
----------------------------------------------------------------------------------------------------
인덱싱
	ㄴ 특정 데이터 추출
	ㄴ 예시
		arr = np.array([
		    [1,2,3],
		    [4,5,6],
		    [7,8,9]
		])
		# 두번째 행의 세번째 열 값 추출
		print(arr[1][2]) # 6
		# 행렬에서 1, 2, 4, 5 추출
		print("행렬에서 1, 2, 4, 5 추출 :", arr[:2, :2])
		# 행렬에서 4, 5, 6, 7, 8, 9 추출
		print("행렬에서 4, 5, 6, 7, 8, 9 추출 :", arr[1:3, 0:3])
		# 행렬에서 2, 3, 5, 6 추출
		print("행렬에서 2, 3, 5, 6 추출", arr[0:2, 1:3])
		# 행렬에서 1, 4 추출
		print("행렬에서 1, 4 추출", arr[0:2, 0])
----------------------------------------------------------------------------------------------------
차원 변환_02
	ㄴ 뒤에 오는 인덱스가 없으면 차원 변환
	ㄴ reshape()의 매개변수에 -1이 있으면..
		ㄴ 해당 차원에 대해서는 알아서 만들어달라는 의미
----------------------------------------------------------------------------------------------------
boolean indexing
	ㄴ 조건 필터링과 검색을 같이 함
	ㄴ 사용예시
		arr = np.arange(1, 10)
		ndarr = arr.reshape(3,3)
		print('ndarr 요소 출력 ---')
		print(ndarr)
		
		# 5보다 큰 요소들 추출
		print('ndarr 5보다 큰 요소 확인1--')
		print(ndarr>5)
		print('ndarr 5보다 큰 요소 확인2--')
		print(ndarr[ndarr>5])

		# 8값 요소를 88로 변경
		ndarr[ndarr==8]=77 #2차원 배열에서 8번쨰 요소...
		print(ndarr)		
----------------------------------------------------------------------------------------------------
numpy 연산
	ㄴ abx / fabs : 절대값
	ㄴ sqrt : 제곱근
	ㄴ square : 제곱
	ㄴ exp : 지수
	ㄴ ceil / floor : 소수자릿수 올림/내림
	ㄴ rint :소수자릿수 반올림
	ㄴ modf : 원소의 몫과 나머지를 각 배열로 변환
	ㄴ lsnan : 각 원소가 Nan인지 아닌지 불린 배열로 리턴
	ㄴ add / subtract : 두 배열의 같은 위치의 요소끼리 덧셈/뺄셈
	ㄴ multiply : 배열 원소끼리 곱셉
	ㄴ divide : 첫번째 배열의 원소에서 두번째 배열 원소로 나눔
	ㄴ power : 첫번째 배열의 원소에 두번째 배열의 원소만큼 제곱
	ㄴ maximum : 비교하는 두 원소 중 큰 값
	ㄴ mod : 첫번째 배열의 원소에서 두번째 배열 원소로 나눈 나머지
	ㄴ 선형대수 연산
		ㄴ +, -, *, /
		ㄴ dot() : 행렬간 연산
			ㄴ 행렬 요소간의 연산은 그냥 *
			ㄴ 사용예시
				A = np.array(
				    [[1, 2, 3],
				    [4, 5, 6]])
				B = np.array(
				    [[7,8],
				     [9,10],
				     [11, 12]])
				print(np.dot(A, B)) # 결과 행의 형태는 2행 2열..
		ㄴ 전치행렬
			ㄴ transpose(행렬)
			ㄴ 원래 행렬에서 행과 열의 위치가 서로 교환됨
			ㄴ 사용예시
				A = np.transpose(A)
	ㄴ 통계함수
		ㄴ sum : 배열 원소들의 합
		ㄴ mean :산술 평균
		ㄴ std / var : 표준편차 / 분산
		ㄴ min / max : 최소 값 / 최대 값
		ㄴ cumsum : 각 원소의 누적값
		ㄴ cumprod : 각 원소의 누적곱
		ㄴ 2차원 배열에서의 통계함수
			# 2차원 배열을 arr 생성
			arr = np.array([[1,2,3],[4,5,6]])
			arr
			# 총합
			print(np.sum(arr))
			#  특정 행의 합
			print(np.sum(arr[1])) # 1행의 합(index로 봤을 때 1, 두번쨰 행)
			# axis=0 : 행방향 - 열단위 합 (axis = 0 열단위 -> 행방향)
			print(np.sum(arr, axis=0))
			# axis=1 : 열방향 - 행단위 합 (axis = 1 행단위 -> 열방향)
			print(np.sum(arr, axis=1))
			# 불린 배열에서의 배열
			arr2 = np.array([[12, 7, 22], [20, 33, 44], [4,5,6]])
			print(arr2[arr2>20]) # 20이 넘는 친구들만 나옴
			print(arr2[arr2>20].sum()) # 20이 넘는 친구들의 요소들을 더함
			print((arr2>20).sum()) # 20이 넘는 애들이 있으면 하나씩 더함
			# unique 연산자를 이용하여 중복제거
			region = np.array(['가산','서울','서울','판교','가산'])
			np.unique(region)
	ㄴ 행렬의 정렬
		ㄴ .sort()
			ㄴ 사용예시
				arr = np.array([9,3,6,1,7,2,4,8,5,6])
				arr = np.sort(arr)
				print(arr) #[1 2 3 4 5 6 6 7 8 9]

				#axis = 1 -> y축 (a x is = 1 ?..)
				#axis = 0 -> x축

				arr2 = np.array([[9,3,6],[1,7,2],[4,8,5]])
				arr2 = np.sort(arr2) #기본적으로 행단위 정렬임

				print("axis =1(default) 행단위 정렬")
				print(arr2)

				print("axis = 0, 열단위 정렬")
				arr3 = np.sort(arr2, axis=0)
				print(arr3)

			ㄴ 결과
				axis =1(default) 행단위 정렬
				[[3 6 9]
				 [1 2 7]
				 [4 5 8]]
				axis = 0, 열단위 정렬
				[[1 2 7]
				 [3 5 8]
				 [4 6 9]]
----------------------------------------------------------------------------------------------------
numpy.random
	ㄴ 파이썬 내장 random 모듈보다 더 빠르게 많은 난수 표본 데이타를 생성
	ㄴ 적합한 난수는 시뮬레이션의 결과에 영향을 미치기에 중요함
	ㄴ 메소드 종류
		ㄴ random : 0.0에서 1.0 사이의 난수 추출
		ㄴ rand : 균등분포에서 표준 추출
			ㄴ 많이 사용되는 함수
		ㄴ randint : 최소, 최대 범위내에서 임의의 난수 추출
			ㄴ 많이 사용되는 함수
		ㄴ randn : 표준편차 1, 평균값 0인 정규분포에서 표준 추출
			ㄴ 많이 사용되는 함수
		ㄴ normal : 정규분포에서 표준추출
		ㄴ shuffle : 리스트나 배열의 순서를 뒤섞음
----------------------------------------------------------------------------------------------------
행렬의 정렬
	ㄴ np.sort() : numpy에서 sort() 호출
	ㄴ np.array.sort() : 행렬자체에서 sort() 호출
		ㄴ 파이썬의 내장함수와 같은 역할인듯
	ㄴ 두 함수의 차이점
		ㄴ np.sort() : 원 행렬을 그대로 유지한채 원 행렬의 정렬된 행렬을 반환
		ㄴ np.array.sort() : 원 행렬 자체를 정렬한 형태로 변환하며 None을 반환
			ㄴ 파이썬의 내장함수와 같은 역할인듯
	ㄴ 내림차순 정렬
		ㄴ [::-1]
		ㄴ 사용예시
			origin = np.array([3,1,9,7])
			print('원본:', origin)
			sorted = origin.sort()
			print('원본:', origin)
			print('정렬 후 :', sorted)
			sorted2 = np.sort(origin)[::-1] # 모든 행, 모든 열에서 -1 을 추가로 표기하면 내림차순이 되버림
			print('내림차순', sorted2)
		ㄴ 결과
			원본: [3 1 9 7]
			원본: [1 3 7 9]
			정렬 후 : None
			내림차순 [9 7 3 1]
	ㄴ 2차원 이상의 행렬에서
		ㄴ axis=1 : 행단위-> 열방향
		ㄴ axis=0 : 열단위-> 행방향
		ㄴ 사용예시
			arr = np.array([[9, 6, 3],[5, 11, 2]])
			arr2 = np.sort(arr, axis=1)
			arr3 = np.sort(arr, axis=0)
			print(arr2, "행단위 ..")
			print(arr3, "열단위 ..")
		ㄴ 결과
			[[ 3  6  9]
			 [ 2  5 11]] 행단위 ..
			[[ 5  6  2]
			 [ 9 11  3]] 열단위 ..
	ㄴ argsort()
		ㄴ 정렬된 행렬의 인덱스 반환
		ㄴ 사용예시_01
			arr = np.array([3, 8, 2, 5])
			print(np.sort(arr))
			print(np.argsort(arr)) # 정렬된 후에 정렬되기 전 상태의 인덱스들을 반환함
		ㄴ 결과_01
			[2 3 5 8]
			[2 0 3 1]
		ㄴ 사용예시_02
			scores = np.array([66, 33, 88, 55, 99])
			names = np.array(['홍길동', '박길동', '맹길동', '최길동', '김길동'])
			idx = np.argsort(scores)
			#idx = np.argsort(scores)[::-1]
			for i in idx:
			    print(names[i], ':', scores[i])
		ㄴ 결과_02
			박길동 : 33
			최길동 : 55
			홍길동 : 66
			맹길동 : 88
			김길동 : 99