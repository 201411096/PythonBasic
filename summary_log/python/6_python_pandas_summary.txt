------------------------------------------------------------
패키지
	ㄴ import pandas as pd
------------------------------------------------------------
pandas 데이터프레임 출력시 최대 컬럼 개수 설정
	ㄴ 사용방법
		ㄴ pd.options.display.max_columns = number
	ㄴ 사용예시
		ㄴ pd.options.display.max_columns = 100
------------------------------------------------------------
dataframe 구조

mydata = {
          'name':['홍길동','박길동','김길동'], 
          'age':[22,33,44], 
          'dept':['컴공','국어','산업']
         }
df = pd.DataFrame(mydata) # mydata를 dataframe으로 생성..
df # dataframe확인
------------------------------------------------------------
Series 구조

import pandas as pd

# 시리즈 예시_01
age_in = pd.Series([22,33,44,25,28])
print(age_in)

# 시리즈 예시_02
age_in = pd.Series([22,33,44,25,28], index=['가', '나', '다', '라', '마'])
print(age_in)

# 딕셔러리를 시리즈 형태로 변환
info_series = pd.Series(info_list)
print(info_series)
------------------------------------------------------------
Series
	ㄴ DataFrame의 한 컬럼 데이터세트
	ㄴ Series 역시 DataFrame의 인덱스와 동일한 인덱스를 가짐
	ㄴ Series는 컬럼이 하나인 데이터 구조체, DataFrame은 컬럼이 여러개인 데이터 구조체
	ㄴ Series의 인덱스는 일반적으로 생각하는 key-value와 개념이 다름(key가 아님 -> 중복 가능)
------------------------------------------------------------
DataFrame 추출
	ㄴ 열(컬럼) 추출
		ㄴ df.컬럼명
		ㄴ df['컬럼명']
	ㄴ 행 추출
		ㄴ df.loc[]
			ㄴ 인덱스(순서)와 명칭으로 추출
			ㄴ label을 통해 값을 찾음
		ㄴ df.iloc[]
			ㄴ 인덱스(순서)로 추출
			ㄴ integer position을 통해 값을 찾음
	ㄴ 행과 열 추출?..
		ㄴ df2.loc['이']['name']
	ㄴ 값 추출
		ㄴ df.values
	ㄴ 컬럼 추출
		ㄴ df.columns
	ㄴ 인덱스 추출
		ㄴ df.index
	ㄴ 키 추출(?)
		ㄴ df.keys
	ㄴ boolean indexing
		ㄴ 사용예시
			ㄴ df[df['age']>=30] # 30세 이상의 레코드 검색
------------------------------------------------------------
DataFrame 함수들
	ㄴ .set_index(컬럼명, inplace=True)
		ㄴ inplace 속성 : 원본에 적용
			ㄴ default : False
			ㄴ df = df.set_index() 한 것과 같은 결과가 나옴 (inplace=True로 할 경우)
		ㄴ 사용예시_01
			ㄴ df.set_index('통화명', inplace=True)
		ㄴ 사용예시_02
			ㄴ df = df.set_index('통화명')
	ㄴ sort_values()
		ㄴ ascending 속성
			ㄴ 1 : 오름차순 (Default) 
			ㄴ 0 : 내림차순
	ㄴ value_counts()
		ㄴ 빈도수 구하기
		ㄴ 사용예시_01
			ㄴ diamonds['cut'].value_counts()
		ㄴ 사용예시_02(일변량질적자료의 시각화)
			ㄴ diamonds['color'].value_counts().plot(kind='bar')
	ㄴ .describe()
		ㄴ 기본통계량 구하기 (총개수, 평균, 표준편차, 최소값, 4분위수)
			ㄴ mean : 평균값
			ㄴ std : 표준편차
	ㄴ .info
	ㄴ .info()
	ㄴ .T
		ㄴ transpose : 행렬이 바뀜
	ㄴ .shape
		ㄴ 행과 열의 수
		ㄴ 행 개수 세기 : .shape[0]
		ㄴ 열 개수 세기 : .shape[1]
	ㄴ .dtypes
		ㄴ 각 컬럼들의 데이터타입
	ㄴ .astype
		ㄴ 컬럼의 데이터 타입 변경
		ㄴ 사용예시
			ㄴ df.astype({'col_A':'float', 'col_B':'float'})
	ㄴ .columns
		ㄴ print 시에 컬럼명을 확인할 수 잇음
		ㄴ 컬럼명을 변경할 수 있음
			ㄴ df.columns = ['' ,,, '']
	ㄴ .reindex
		ㄴ 인덱스 변경
	ㄴ .plot
		ㄴ 데이터를 시각화
		ㄴ 옵션
			ㄴ .plot(kind=옵션)
				ㄴ pie
				ㄴ hist
				ㄴ bar
				ㄴ ...
	ㄴ .head(숫자)
		ㄴ 앞에서부터 숫자개수만큼의 행 보기 <default : 5>
	ㄴ .tail(숫자)
		ㄴ 뒤에서부터 숫자개수만큼의 행 보기 <default : 5>		
	ㄴ .nlargest(매개변수1, 매개변수2)
		ㄴ 매개변수2에 해당하는 컬럼을 큰 순서대로 매개변수1에 해당하는 개수만큼 가져옴
	ㄴ .nsmallest(매개변수1, 매개변수2)
		ㄴ 매개변수2에 해당하는 컬럼을 작은 순서대로 매개변수1에 해당하는 개수만큼 가져옴
	ㄴ .add( , fill_value=)
		ㄴ 사용예시
			ㄴ df2.add(df3, fill_value = 0) # 비어있는 부분은 0으로 채워서 계산해줌
	ㄴ .join()
		ㄴ 사용예시
			ㄴ df3 = df1.join(df2)
	ㄴ crosstab()
	ㄴ .cut()
	ㄴ .get_dummies(df[columnname], prefix=columnname)
		ㄴ one hot encoding
		ㄴ 사용예시
			ㄴ dummy_Pclass = pd.get_dummies(df['Pclass'], prefix='Pclass') # 3등석 자리라면 (Pclass_1 = 0, Pclass_2=0, Pclass_3=1)

------------------------------------------------------------
통계함수
	ㄴ count()
	ㄴ sum() : 합계
	ㄴ mean() : 평균
	ㄴ std() : standard deviation(표준편차)
	ㄴ var() : variance(분산)
	ㄴ min()
	ㄴ max()
	ㄴ cumsum() : 누적합
		ㄴ axis 옵션
			ㄴ 0 : 같은 column끼리..
			ㄴ 1 : 같은 row끼리..
	ㄴ cumprod() : 누적곱
	ㄴ .value_counts() : 컬럼 개수를 셈
------------------------------------------------------------
apply 함수
	ㄴ 사용예시_01
		import pandas as pd
		df = pd.DataFrame( {'a':[10,20,30], 'b':[2, 4, 6]})
		df
		def func(score):
		    grade = ''
		    if( score <= 10) : grade='C'
		    elif(score <= 20) : grade='B'
		    elif(score <= 30) : grade='A'
		    return grade
		# 1.
		df['a'].apply(func)
		# 2.
		df['a'].apply(lambda x:func(x))
------------------------------------------------------------
데이터 정제
	ㄴ pd.concat()
		ㄴ 데이터프레임을 합침
		ㄴ dataframe 구조가 일치하는 경우에 사용(-> 일치하지 않는 부분은 결측치로 다 채워짐)
		ㄴ 사용방법
			ㄴ pd.concat([데이터프레임 리스트]) # 여러개의 dataframe을 합칠 수 있음
		ㄴ 사용예시
			ㄴ pd.concat([201701, 201702])
				ㄴ 201701, 201702 둘 다 구조가 같지만 내용이 다른 dataframe
	ㄴ pd.merge()
		ㄴ 데이터프레임을 합침(sql의 조인처럼)
		ㄴ 매개변수
			ㄴ left_on
			ㄴ right_on
			ㄴ how
				ㄴ inner join(default), outer join, left join, right join
		ㄴ 사용방법_1
			ㄴ pd.merge(df1, df2, left_on=df1.columnname, right_on=df2.columnname)
		ㄴ 사용예시_1
			ㄴ pd.merge(site, visited, left_on='name', right_on='site')
		ㄴ 사용방법_2
			ㄴ df1.merge(df2, left_on=df1.columnname, right_on=df2.columnname)
		ㄴ 사용예시_2
			ㄴ site.merge(visited, left_on='name', right_on='site')
		ㄴ outer join 사용예시_01
			ㄴ pd.merge(person, survey, how='outer', left_on='ident', right_on='person')
		ㄴ outer join 사용예시_02
			ㄴ person.merge(survey, how='outer', left_on='ident', right_on='person')
		ㄴ left join 사용예시_01
			ㄴ merge1 = pd.merge(raw_log, raw_funnel, left_on='view_id', right_on='view_id', how='left')
------------------------------------------------------------
누락값 : NaN (nan, NaN, NAN)
	ㄴ 누락값이 생기는 이유
		ㄴ 데이터 자체적으로 존재
		ㄴ 데이터 연결하면서
		ㄴ 데이터 입력시
		ㄴ 데이터 추출하여 연산할 때
	ㄴ 누락값 확인하기
		ㄴ 누락값 인지 확인
			ㄴ df.isnull()
			ㄴ df.notnull()
		ㄴ 누락값 행수 확인
			ㄴ df.shape[0] - df.count() 
			ㄴ # ~.shape를 할 경우 dataframe의 행렬을 가져옴 -> shape[0]은 튜플의 첫번째인 행을 의미
			ㄴ df.count() 는 각 열에서 null이 아닌 요소들의 개수를 셈
				ㄴ 결과 : 각 컬럼별 null인 요소들의 개수가 반환됨
		ㄴ 누락값 수 확인
			ㄴ numpy lib - count_nonzero() 이용
			ㄴ 사용예시
				ㄴ np.count_nonzero(ebola.isnull())
	ㄴ 누락값 처리하기
		ㄴ dropna()
			ㄴ 누락값 삭제하기
		ㄴ fillna()
			ㄴ 누락값을 다른 값으로 대치하기
	ㄴ 데이터가 많은 경우 NaN을 확인하는 방법
		ㄴ pip install missingno
		ㄴ 사용예시
			import missingno as msno
			df = pd.DataFrame(np.random.rand(100, 100))
			df = df[df>0.3] # 0.3보다 큰 데이터들을 다시 넣음(0.3보다 작은 값들은 결측치가 됨)
			msno.matrix(df)
------------------------------------------------------------
read.html()
	ㄴ 크롤링 시에 table태그 부분을 가져오면 되는 듯
	ㄴ 사용예시
		import pandas as pd

		url = 'https://finance.naver.com/marketindex/exchangeList.nhn'

		df_list = pd.read_html(url) # read_html
		#df_list # dataframe들이 list안에 들어있음
		df = df_list[0]
		df
------------------------------------------------------------
datetime 라이브러리
	ㄴ dataframe에서 문자열 처리를 위해 str 접근자를 사용하듯이.. datetime 오브젝트는 dt접근자를 사용해야 datetime 속성이나 메소드를 사용가능
	ㄴ 사용예시_01 (string 형태의 데이터를를 datetime object 형태의 데이터로 변경)
		ㄴ ebola['date_dt'] = pd.to_datetime(ebola['Date'])
	ㄴ 사용예시_02 (파일을 읽는 순간에 변환
		ㄴ banks = pd.read_csv('./data/banklist.csv', parse_dates=['Closing Date', 'Updated Date'])