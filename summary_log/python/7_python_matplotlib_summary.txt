------------------------------------------------------------
matplotlib
------------------------------------------------------------
matplotlib
	ㄴ import matplotlib.pyplot as plt
------------------------------------------------------------
한글처리
	ㄴ 방법1
		import matplotlib.pyplot as plt
		from matplotlib import font_manager, rc  # rc : resource

		# 추가설정 - 폰트를 변경하면 -표시가 ㅁ으로 변경되기에 '-'를 변경하지 않도록 지정
		plt.rcParams['axes.unicode_minus']=False 

		fong_loc = "c:/Windows/Fonts/malgun.ttf" # 글꼴 경로
		font_name = font_manager.FontProperties(fname=fong_loc).get_name()
		# print(font_name) # 폰트매니저를 통해 인식하고 있는 글꼴 이름을 가져온다
		rc('font', family=font_name) # 리소스에 글꼴을 등록
	ㄴ 방법2
		# 간단한 한글등록
		import matplotlib.pyplot as plt
		from matplotlib import font_manager, rc

		plt.rcParams['axes.unicode_minus']=False  # 추가설정 : 폰트를 변경하면 -표시가 ㅁ으로 변경되기에 '-'를 변경하지 않도록 지정
		rc('font', family='Malgun Gothic') #맑은 고딕
	ㄴ 폰트 종류 확인 방법
		from matplotlib import font_manager
		font_manager.fontManager.ttflist
------------------------------------------------------------
많이 사용하는 그래프의 종류
	ㄴ pandas 제공 - Series, DataFrame
	ㄴ matplotlib.pyplot 라이브러리
	ㄴ seaborn 라이브러리
------------------------------------------------------------
pandas 제공 그래프
	ㄴ 함수 종류
		ㄴ .plot()
		ㄴ .set_xlabel()
		ㄴ .set_ylabel()
		ㄴ .set_title()
		ㄴ .set_xlim() # x축의 범위를 변경
		ㄴ .set_ylim() # y축의 범위를 변경
		ㄴ .set_xticks # x축 간격
		ㄴ .set_yticks # y축 간격
		ㄴ .set_xticklabels # x축 눈금 라벨
		ㄴ .set_yticklabels # y축 눈금 라벨
		ㄴ ..
	ㄴ series의 plot()
		ㄴ 사용방법_01
			from pandas import Series
			s=Series([1.5, 2.3, 0.9], index=['no1','no2','no3'])
			s.plot(kind='bar')
		ㄴ 사용방법_02
			splot = s.plot.bar() # plot 안에 존재하는 bar 함수 호출
			splot.set_xlabel('데이터')
			splot.set_ylabel('값')
			splot.set_title('샘플')
	ㄴ dataframe의 plot()
		ㄴ 사용방법
			from pandas import DataFrame
			import numpy as np

			# 데이타프레임에서 시각화 작업
			df=DataFrame(np.random.randn(10, 4),    # 난수 10개를 4번
			             columns=['level','step','cnt','temp'], 
			             index=np.arange(0,100,10))     # np.arange(0,100,10)
			df.plot() # ;을 찍으면 객체 설명이 같이 나오지 않음
			df.plot(kind='barh', title='데이터 차트')
------------------------------------------------------------
matplotlib의 그래프
	ㄴ 기본적인 순서
		ㄴ 그래프 틀 만들기 -> 그래프 그리기 -> 그래프 보여주기
		ㄴ plt.figure()
			ㄴ 그래프 틀 만들기
		ㄴ plt.plot(data)
			ㄴ 그래프 그리기
		ㄴ plt.show()
			ㄴ 그래프 보여주기
	ㄴ 함수종류
		ㄴ figure()
		ㄴ plot()
		ㄴ xlabel()
		ㄴ ylabel()
		ㄴ title()
		ㄴ show()
		ㄴ grid() : 격자 눈금
		ㄴ text() : 글씨를 출력 (tooltip을 간단하게 보여주고 싶을때)
	ㄴ 사용예시_01
		import matplotlib.pyplot as plt

		data = [10, 15, 18, 30, 20]
		plt.figure(figsize=(10,4)) #inch 단위
		plt.plot(data) # matplotlib 사용시에는 -> matplotlib별칭('plt').plot(데이터) <-> pandas 사용시에는 -> 데이터.plot()
		plt.xlabel('시간')
		plt.ylabel('온도')
		plt.title('샘플')
		plt.show()
	ㄴ 사용예시_02
		plt.plot(data, color='blue', linestyle='dashed', marker='o', lw=5, markerfacecolor='yellow', markersize=10)
	ㄴ plot style
		ㄴ 사용방법
			ㄴ plt.style.use(stylename)
		ㄴ 사용예시
			ㄴ plt.style.use('seaborn-whitegrid')
	ㄴ 색상지정
		ㄴ 사용방법
			ㄴ plt.plot(data, color='' )
		ㄴ 사용예시
			ㄴ plt.plot(np.sin(x-0), color='red')     # 색상 이름 지정
			ㄴ plt.plot(np.sin(x-1), color='b')       # 색상코드명
			ㄴ plt.plot(np.sin(x-2), color='#FFDD44') # 16진수 RGB
			ㄴ plt.plot(np.sin(x-3), color='chartreuse') # html 색상 이름
			ㄴ plt.plot(np.sin(x-4), color='0.75') # 0-1 사이 값으로 회색
			ㄴ plt.plot(np.sin(x-5), color=(1.0, 0.5, 0.2)) # rgb를 튜플 형식으로
	ㄴ 선스타일
		ㄴ 사용방법
			ㄴ plt.plot(data, linestyle='')
		ㄴ 사용예시_01
			ㄴ plt.plot(np.sin(x-0), linestyle='solid');
			ㄴ plt.plot(np.sin(x-1), linestyle='dashed');
			ㄴ plt.plot(np.sin(x-2), linestyle='dotted');
			ㄴ plt.plot(np.sin(x-3), linestyle='dashdot');
		ㄴ 사용예시_02
			ㄴ plt.plot(np.sin(x-0), linestyle='-');
			ㄴ plt.plot(np.sin(x-1), linestyle='--');
			ㄴ plt.plot(np.sin(x-2), linestyle=':');
			ㄴ plt.plot(np.sin(x-3), linestyle='-.');
	ㄴ 선과 스타일을 간단하게 표현
		ㄴ 사용예시
			ㄴ plt.plot(np.sin(x-0), 'g--');
			ㄴ plt.plot(np.sin(x-1), ':m');
			ㄴ plt.plot(np.sin(x-2), 'k-.'); # dashdot + black
			ㄴ plt.plot(np.sin(x-3), 'r:'); # red + dotted
	ㄴ 범례
		ㄴ 사용예시
			plt.plot(np.sin(x-0), 'g--', label='first');
			plt.plot(np.sin(x-1), ':m', label='second');
			plt.plot(np.sin(x-2), 'k-.', label='third'); # dashdot + black
			plt.plot(np.sin(x-3), 'r:', label='fourth'); # red + dotted
	ㄴ 범례위치
		ㄴ 사용예시
			# 범례 위치 : 오른쪽 상단 (1), 왼쪽 상단(2), 왼쪽 하단(3), 오른쪽 하단(4)
			plt.legend(loc=4)
------------------------------------------------------------
scatter 그래프
	ㄴ 사용 예시
		plt.scatter(x=tips['total_bill'], 
		            y=tips['tip'],
		            c=tips['sex_color'],
		            s=tips['size']*20
		           )
------------------------------------------------------------
subplot
	ㄴ 하나의 화면에 여러 개의 그래프 그리기
	ㄴ 사용방법_01
		ㄴ figure(그림틀=공간?)을 만들고 거기에 subplot을 추가 하는 방식
		ㄴ figure 생성 -> figure에 subplot추가
		ㄴ figure 생성
			ㄴ fig = plt.figure(figsize= (x, y)) # inch 단위
		ㄴ figure에 subplot 추가
			ㄴ ax1 = fig.add_subplot(1,2,1) # 1행 2열의 첫번째 영역
	ㄴ 사용예시_01
		%matplotlib inline
		import numpy as np
		import matplotlib.pyplot as plt

		fig = plt.figure(figsize= (16, 5))
		ax1 = fig.add_subplot(1,2,1) # 1행 2열의 첫번째
		ax2 = fig.add_subplot(1,2,2)

		ax1.plot(np.random.randn(100))
		ax2.plot(np.random.randn(100).cumsum())
	ㄴ 사용방법_02
		ㄴ figure로 공간을 만들고 파이플롯(pyplot)의 subplot()으로 각각의 패널 지정
		ㄴ figure 생성
			ㄴ fig = plt.figure(figsize= (x, y)) # inch 단위
		ㄴ subplot()으로 패널 지정
			ㄴ plt.subplot(row, column, number) # 행, 열, 몇번째영역인지
	ㄴ 사용예시_02
		fig = plt.figure(figsize= (16, 5))
		ax1 = plt.subplot(1,2,1) # 1행 2열의 첫번째
		ax2 = plt.subplot(1,2,2)
		ax1.plot(np.random.randn(100))
		ax2.plot(np.random.randn(100).cumsum())
	ㄴ 사용방법_03
		ㄴ ax 객체를 이용하기
		ㄴ fig, ax를 같이 받아옴
			ㄴ fig, ax = plt.subplots(row, column, figsize=(x, y)) # return 값이 두개임 (figure axes)
	ㄴ 사용예시_03
		fig, ax = plt.subplots(1,2) # return 값이 두개임 (figure axes)
		ax[0].plot(np.random.randn(100))
		ax[1].plot(np.random.randn(100).cumsum())
------------------------------------------------------------
subplot 예시
	ㄴ 예시_01
		plt.figure(figsize=(12,6))
		plt.s
ubplot(221) # 2행 2열의 첫번째 영역 # 전체영역을 2행 2열로 나누었을때 첫번째 영역
		plt.subplot(222) # 2행 2열의 두번째 영역 # 전체영역을 2행 2열로 나누었을때 두번째 영역
		plt.subplot(212) # 2행 1열의 2번째 영역 # 전체영역을 2행 1열로 나누었을때 두번째 영역
		plt.show()
	ㄴ 예시_02
		plt.figure(figsize=(12,6))

		plt.subplot(2, 1, 1)
		plt.subplot(2, 3, (4,5))	# 2행 3열 4~5번째 영역
		plt.subplot(2, 3, 6)		# 2행 3열의 6번째 영역

		plt.show()
------------------------------------------------------------
seaborn
	ㄴ import seaborn as sns
	ㄴ load_dataset()
		ㄴ 파일을 불러서 데이터프레임을 부르는것처럼 반환값이 dataframe임
	ㄴ matplotlib의 subplots()으로 기본틀을 생성 -> seaborn의 displot()에 데이터 전달
		ㄴ distplot()은 그래프 종류인듯
	ㄴ 기본순서
		ㄴ plt.subplot() -> sns.graphnameplot()
	ㄴ 사용예시_01
		plt.subplots()
		axes = sns.distplot(tips['total_bill'], kde=False) # kde=False -> 실선이 보이지 않음 (Kernel Density Estimate)
		axes.set_title('total_bill')
	ㄴ 사용예시_02
		plt.subplots()
		sns.countplot('day', data=tips)
------------------------------------------------------------
seaborn 그래프 종류
	ㄴ regplot()
		ㄴ 사용예시
			plt.subplot()
			axes = sns.regplot(x='total_bill', y='tip', data=tips)
	ㄴ jointplot()
		ㄴ 산점도와 히스토그램을 한번에
		ㄴ 사용예시
			ㄴ axes = sns.jointplot(x='total_bill', y='tip', data=tips, kind='hex')
	ㄴ kdeplot()
		ㄴ 이차원 밀집도 그래프(등고선 그래프)
		ㄴ 사용예시
			ㄴ axes = sns.kdeplot(data=tips['total_bill'], data2=tips['tip'], shade=True)
	ㄴ barplot()
		ㄴ 이산형 데이터(명목데이터)
		ㄴ 사용예시
			ㄴ axes = sns.barplot(x='time', y='total_bill', data=tips)
	ㄴ boxplot()
		ㄴ 박스그래프
		ㄴ 최소값, 4분위수, 평균값, 이상치 등의 통계량을 한번에 표현하는 그래프
		ㄴ 1분위수와 3분위수를 박스로 그려짐
		ㄴ 사용예시
			ㄴ axes = sns.boxplot(x='time', y='total_bill', data=tips)
	ㄴ violinplot()
		ㄴ 박스 그래스는 통계 수치를 확인하기 위해 자주 사용되지만 데이터 분산이 모호하기에 박스 그래스에 커널 밀도를 표현한 그래프
		ㄴ 사용예시_01
			ㄴ axes = sns.violinplot(x='time', y='total_bill', data=tips)
		ㄴ 사용예시_02
			ㄴ sns.violinplot(x='time', y='total_bill', data=tips, hue='sex') # hue 색깔, 색조, 빛깔
	ㄴ pairplot()
		ㄴ 1. 데이타셋에서 연속형 데이타로 된 컬럼
		ㄴ 2. 동일 컬럼인경우 즉 하나의 변수이기에 히스토그램으로 나옴
		ㄴ 3. 다른 변수와의 결합은 이차원 그래프로 산점도 그래프로 나옴
		ㄴ 4. 대각선으로는 동일한 결과  
		ㄴ 사용예시
			pair = sns.PairGrid(tips)
			pair = pair.map_upper(sns.regplot) # 삼전도 그래프
			pair = pair.map_lower(sns.kdeplot)
			pair = pair.map_diag(sns.distplot)
	ㄴ implot()
		ㄴ 사용예시
			ㄴ sns.lmplot(y='tip', x='total_bill', data=tips, fit_reg=False, hue='sex', markers=['x', 'o'])
	ㄴ FacetGrid()
		ㄴ 사용예시_01
			facet = sns.FacetGrid(tips, col='time')
			facet.map(sns.distplot, 'total_bill')			
		ㄴ 사용예시_02
			facet = sns.FacetGrid(tips, col='day', hue='sex')
			facet.map(sns.distplot, 'total_bill')
		ㄴ 사용예시_03
			facet = sns.FacetGrid(tips, col='time', row='smoker', hue='sex')
			facet.map(sns.distplot, 'total_bill')
	ㄴ heatmap
		ㄴ 사용예시
			ㄴ sns.heatmap(raw_data.corr())
	ㄴ pairplot
		ㄴ 사용예시
			sns.pairplot(raw_data) #scatter가 모인게 pairplot
			plt.show()
	ㄴ annotate()
		ㄴ 사용예시
			fig, ax = plt.subplots() 
			x = np.linspace(0, 20, 100) # 0-20 사이에 균일하게 100개의 데이터
			ax.plot(x, np.cos(x))
			ax.axis('equal')
			ax.annotate('my comment', xy=(6,2), xytext=(10,4), 
			            arrowprops=dict(facecolor='red', shrink=0.05)) # xytext 글자 위치
------------------------------------------------------------
데이터 분석과 그래프
	ㄴ 일변량 질적자료분석
		ㄴ 변수 하나
		ㄴ 질적자료 - 명목형(카테고리) / 이산형
		ㄴ 빈도와 그래프
			ㄴ 빈도 : 자료가 가지는 각각의 값이 몇 개 있는지를 구한 수치
			ㄴ 백분율
		ㄴ 그래프 종류
			ㄴ 막대그래프
			ㄴ 원그래프(pie)
	ㄴ 일변량 양적자료분석
		ㄴ 변수 하나
		ㄴ 양적자료 - 수치형 / 연속형 / 숫자형 자료 (ex) 온도, 키, 몸무게)
		ㄴ 양적자료는 값에 대한 빈도와 백분율을 구하지 않음(데이터가 가지는 값의 종류가 많기 떄문에)
			ㄴ 빈도와 백분율을 구하려면 구간별 새로운 자료를 생성하고 구함
		ㄴ 그래프 종류
			ㄴ 히스토그램
			ㄴ 박스플롯
	ㄴ 이변량 질적자료분석
		ㄴ 이변량 - 변수 2개
		ㄴ 질적자료 - 명목형(카테고리) / 이산형
		ㄴ 다변량 - 변수 여러개
		ㄴ 그래프
			ㄴ 두 질적자료에 대한 빈도수 -> crosstab() 이용
		ㄴ 교차표 결과를 이용 -> 묶음 세로 막대 그래프
	ㄴ 이변량 양적자료분석
		ㄴ 이변량 - 변수 2개
		ㄴ 양적자료 - 수치형 / 연속형 / 숫자형 자료 (ex) 온도, 키, 몸무게)
		ㄴ 다변량 - 변수 여러개